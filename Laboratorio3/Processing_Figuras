class Shape {

  private int[][] cuadrado = {{0, 0}, {1, 0}, {0, 1}, {1, 1}};
  private int[][] linea = {{0, 0}, {1, 0}, {2, 0}, {3, 0}};
  private int[][] triangulo = {{0, 0}, {1, 0}, {1, 1}, {2, 1}};
  private int[][] Lizquierda = {{0, 0}, {0, 1}, {1, 0}, {2, 0}};
  private int[][] Lderecha = {{0, 0}, {1, 0}, {0, 1}, {1, 1}};
  private int[][] z = {{0, 0}, {1, 0}, {1, 1}, {2, 1}};
  private int[][] zinv = {{0, 1}, {1, 1}, {1, 0}, {2, 0}};


  private int[][] theShape, oS;
  private boolean isActive;
  private int counter,r, g, b ;
  private float w;
  private int choice, rotCount;
  private int theX, theY;


  public Shape() {
    w=width/24;
    choice=(int)random(6);
    switch(choice) {
    case 0:
      theShape=cuadrado;
      r=255;
      break;
    case 1:
      theShape=linea;
      g=255;
      break;
    case 2:
      theShape=triangulo;
      b=255;
      break;
    case 3:
      theShape=Lizquierda;
      r=255;
      g=255;
      break;
    case 4:
      theShape=Lderecha;
      g=255;
      b=255;
      break;
    case 5:
      theShape=z;
      r=255;
      b=255;
      break;
    case 6:
      theShape=zinv;
      r=155;
      g=60;
      b=200;
      break;
    }
    counter =1;
    oS=theShape;
    rotCount=0;
  }


  public void display() {
    fill(r, g, b);
    for (int i=0; i<4; i++) {
      rect(theShape[i][0]*w, theShape[i][1]*w, w, w);
    }
  }
  public void showOnDeck() {
    fill(0,0,100);
    rect(width/2,0,width/2,height);
    fill(0);
    text("SIGUIENTE FIGURA",width/2+20,100);
    fill(255);
    text("SIGUIENTE FIGURA",width/2+25,105);
    noFill();
    rect(390,180,300,100);
    stroke(255,0,0);
    fill(r, g, b);
    for (int i=0; i<4; i++) {
      rect(theShape[i][0]*w +width/2+140, theShape[i][1]*w+200, w, w);
    }
  }

  public void moveDown(int level) {
    if (counter%50==0) {
      moveShape("DOWN");
    }
    counter++;
  }


  public boolean checkSide(String dir) {
    switch(dir) {
    case "RIGHT":
      for (int i=0; i<4; i++) {
        if (theShape[i][0]>10) {
          return false;
        }
      }
      break;
    case "LEFT":
      for (int i=0; i<4; i++) {
        if (theShape[i][0]<1) {
          return false;
        }
      }
      break;
    case "DOWN":
      for (int i=0; i<4; i++) {
        if (theShape[i][1]>22) {
          isActive=false;
          return false;
        }
      }
      break;
    }
    return true;
  }

  public void moveShape(String dir) {
    if (checkSide(dir)) {
      if (dir=="RIGHT") {
        for (int i=0; i<4; i++) {
          theShape[i][0]++;
        }
      }
      if (dir=="LEFT") {
        for (int i=0; i<4; i++) {
          theShape[i][0]--;
        }
      }
      if (dir=="DOWN") {
        for (int i=0; i<4; i++) {
          theShape[i][1]++;
        }
      }
    }
  }

  public void rotate() {
    if (theShape!=cuadrado) {
      int[][] rotated = new int[4][2];
      if (rotCount % 4 == 0) {
        for (int i=0; i<4; i++) {
          rotated[i][0]=oS[i][1]-theShape[1][0];
          rotated[i][1]=-oS[i][0] - theShape[1][1];
        }
      } else if (rotCount %4==1) {
        for (int i=0; i<4; i++) {
          rotated[i][0]=-oS[i][0]-theShape[1][0];
          rotated[i][1]=oS[i][1] - theShape[1][1];
        }
      } else if (rotCount %4==2) {
        for (int i=0; i<4; i++) {
          rotated[i][0]=-oS[i][1]-theShape[1][0];
          rotated[i][1]=oS[i][0] - theShape[1][1];
        }
      } else if (rotCount %4==3) {
        for (int i=0; i<4; i++) {
          rotated[i][0]=oS[i][0]-theShape[1][0];
          rotated[i][1]=oS[i][1] - theShape[1][1];
        }
      }
      theShape=rotated;
    }
  }

  public boolean checkBack(Background b) {
    for (int i=0; i<4; i++) {
      theX=theShape[i][0];
      theY=theShape[i][1];
      if (theX>=0 && theX<12 && theY>=0 && theY<23) {
        for (int a=0; a<3; a++) {
          if (b.colors[theX][theY+1][a]!=0 ) {
            return false;
          }
        }
      }
    }
    return true;
  }
}
